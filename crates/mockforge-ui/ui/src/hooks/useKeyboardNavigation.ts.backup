import { useCallback, useEffect, useRef } from 'react';

export interface KeyboardShortcut {
  key: string;
  ctrl?: boolean;
  shift?: boolean;
  alt?: boolean;
  meta?: boolean;
  callback: (event: KeyboardEvent) => void;
  preventDefault?: boolean;
  stopPropagation?: boolean;
  description?: string;
}

export interface UseKeyboardNavigationOptions {
  enabled?: boolean;
  stopPropagation?: boolean;
  preventDefault?: boolean;
}

export function useKeyboardNavigation(
  shortcuts: KeyboardShortcut[],
  options: UseKeyboardNavigationOptions = {}
) {
  const { enabled = true, stopPropagation = false, preventDefault = true } = options;
  const shortcutsRef = useRef(shortcuts);

  // Update shortcuts ref when shortcuts change
  useEffect(() => {
    shortcutsRef.current = shortcuts;
  }, [shortcuts]);

  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if (!enabled) return;

    for (const shortcut of shortcutsRef.current) {
      const keyMatches = event.key.toLowerCase() === shortcut.key.toLowerCase();
      const ctrlMatches = !!shortcut.ctrl === event.ctrlKey;
      const shiftMatches = !!shortcut.shift === event.shiftKey;
      const altMatches = !!shortcut.alt === event.altKey;
      const metaMatches = !!shortcut.meta === event.metaKey;

      if (keyMatches && ctrlMatches && shiftMatches && altMatches && metaMatches) {
        if (shortcut.preventDefault ?? preventDefault) {
          event.preventDefault();
        }
        if (shortcut.stopPropagation ?? stopPropagation) {
          event.stopPropagation();
        }
        shortcut.callback(event);
        break;
      }
    }
  }, [enabled, preventDefault, stopPropagation]);

  useEffect(() => {
    if (enabled) {
      document.addEventListener('keydown', handleKeyDown);
      return () => document.removeEventListener('keydown', handleKeyDown);
    }
  }, [enabled, handleKeyDown]);

  return {
    shortcuts: shortcutsRef.current,
  };
}

// Hook for common application shortcuts
export function useAppShortcuts({
  onSearch,
  onRefresh,
  onToggleTheme,
  onEscape,
  onHelp,
}: {
  onSearch?: () => void;
  onRefresh?: () => void;
  onToggleTheme?: () => void;
  onEscape?: () => void;
  onHelp?: () => void;
} = {}) {
  const shortcuts: KeyboardShortcut[] = [
    ...(onSearch ? [{
      key: 'k',
      ctrl: true,
      callback: onSearch,
      description: 'Open search',
    }] : []),
    ...(onRefresh ? [{
      key: 'r',
      ctrl: true,
      callback: onRefresh,
      description: 'Refresh data',
    }] : []),
    ...(onToggleTheme ? [{
      key: 'd',
      ctrl: true,
      shift: true,
      callback: onToggleTheme,
      description: 'Toggle dark mode',
    }] : []),
    ...(onEscape ? [{
      key: 'Escape',
      callback: onEscape,
      description: 'Close modal/cancel action',
    }] : []),
    ...(onHelp ? [{
      key: '?',
      callback: onHelp,
      description: 'Show keyboard shortcuts',
    }] : []),
  ];

  useKeyboardNavigation(shortcuts);

  return { shortcuts };
}

// Hook for table/list navigation
export function useListNavigation<T>({
  items,
  onSelect,
  onActivate,
  enabled = true,
  loop = true,
}: {
  items: T[];
  onSelect?: (item: T, index: number) => void;
  onActivate?: (item: T, index: number) => void;
  enabled?: boolean;
  loop?: boolean;
}) {
  const selectedIndexRef = useRef(-1);

  const selectItem = useCallback((index: number) => {
    if (!enabled || items.length === 0) return;

    let newIndex = index;

    if (loop) {
      if (newIndex < 0) {
        newIndex = items.length - 1;
      } else if (newIndex >= items.length) {
        newIndex = 0;
      }
    } else {
      newIndex = Math.max(0, Math.min(newIndex, items.length - 1));
    }

    selectedIndexRef.current = newIndex;
    if (onSelect) {
      onSelect(items[newIndex], newIndex);
    }
  }, [items, onSelect, enabled, loop]);

  const shortcuts: KeyboardShortcut[] = [
    {
      key: 'ArrowDown',
      callback: () => selectItem(selectedIndexRef.current + 1),
      description: 'Select next item',
    },
    {
      key: 'ArrowUp',
      callback: () => selectItem(selectedIndexRef.current - 1),
      description: 'Select previous item',
    },
    {
      key: 'Home',
      callback: () => selectItem(0),
      description: 'Select first item',
    },
    {
      key: 'End',
      callback: () => selectItem(items.length - 1),
      description: 'Select last item',
    },
    {
      key: 'Enter',
      callback: () => {
        if (selectedIndexRef.current >= 0 && onActivate) {
          onActivate(items[selectedIndexRef.current], selectedIndexRef.current);
        }
      },
      description: 'Activate selected item',
    },
    {
      key: ' ',
      callback: () => {
        if (selectedIndexRef.current >= 0 && onActivate) {
          onActivate(items[selectedIndexRef.current], selectedIndexRef.current);
        }
      },
      description: 'Activate selected item',
    },
  ];

  useKeyboardNavigation(shortcuts, { enabled });

  return {
    selectedIndex: selectedIndexRef.current,
    selectItem,
    shortcuts,
  };
}

// Hook for modal keyboard navigation
export function useModalNavigation({
  onClose,
  onConfirm,
  onCancel,
  enabled = true,
}: {
  onClose?: () => void;
  onConfirm?: () => void;
  onCancel?: () => void;
  enabled?: boolean;
} = {}) {
  const shortcuts: KeyboardShortcut[] = [
    ...(onClose ? [{
      key: 'Escape',
      callback: onClose,
      description: 'Close modal',
    }] : []),
    ...(onConfirm ? [{
      key: 'Enter',
      ctrl: true,
      callback: onConfirm,
      description: 'Confirm action',
    }] : []),
    ...(onCancel ? [{
      key: 'Escape',
      callback: onCancel,
      description: 'Cancel action',
    }] : []),
  ];

  useKeyboardNavigation(shortcuts, { enabled });

  return { shortcuts };
}

// Hook for form navigation
export function useFormNavigation({
  onSubmit,
  onReset,
  enabled = true,
}: {
  onSubmit?: () => void;
  onReset?: () => void;
  enabled?: boolean;
} = {}) {
  const shortcuts: KeyboardShortcut[] = [
    ...(onSubmit ? [{
      key: 'Enter',
      ctrl: true,
      callback: onSubmit,
      description: 'Submit form',
    }] : []),
    ...(onReset ? [{
      key: 'r',
      ctrl: true,
      alt: true,
      callback: onReset,
      description: 'Reset form',
    }] : []),
  ];

  useKeyboardNavigation(shortcuts, { enabled });

  return { shortcuts };
}

// Hook for creating a keyboard shortcuts help component
export function useKeyboardShortcutsHelp(shortcuts: KeyboardShortcut[]) {
  const formatShortcut = useCallback((shortcut: KeyboardShortcut) => {
    const keys = [];
    if (shortcut.ctrl) keys.push('Ctrl');
    if (shortcut.shift) keys.push('Shift');
    if (shortcut.alt) keys.push('Alt');
    if (shortcut.meta) keys.push('Cmd');
    keys.push(shortcut.key);
    return keys.join(' + ');
  }, []);

  const ShortcutsHelpComponent = useCallback(() => (
    <div className="space-y-4">
      <h3 className="text-heading-md text-primary">Keyboard Shortcuts</h3>
      <div className="space-y-2">
        {shortcuts
          .filter(shortcut => shortcut.description)
          .map((shortcut, index) => (
            <div key={index} className="flex justify-between items-center">
              <span className="text-body-md text-secondary">{shortcut.description}</span>
              <kbd className="px-2 py-1 bg-muted border border-border rounded text-mono-sm">
                {formatShortcut(shortcut)}
              </kbd>
            </div>
          ))}
      </div>
    </div>
  ), [shortcuts, formatShortcut]);

  return {
    formatShortcut,
    ShortcutsHelpComponent,
  };
}
