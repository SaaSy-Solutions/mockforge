name: Publish Plugin to Registry

on:
  push:
    tags:
      - 'v*.*.*'
      - 'plugin-*'
  workflow_dispatch:
    inputs:
      plugin_path:
        description: 'Path to plugin directory'
        required: true
        default: '.'
      dry_run:
        description: 'Dry run (validate only, do not publish)'
        required: false
        type: boolean
        default: false

env:
  MOCKFORGE_REGISTRY_URL: ${{ secrets.MOCKFORGE_REGISTRY_URL || 'https://registry.mockforge.dev' }}
  MOCKFORGE_REGISTRY_TOKEN: ${{ secrets.MOCKFORGE_REGISTRY_TOKEN }}

jobs:
  validate:
    name: Validate Plugin
    runs-on: ubuntu-latest
    outputs:
      plugin_name: ${{ steps.manifest.outputs.name }}
      plugin_version: ${{ steps.manifest.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install MockForge CLI
        run: |
          cargo install mockforge-cli --locked

      - name: Read plugin manifest
        id: manifest
        run: |
          PLUGIN_NAME=$(yq eval '.name' plugin.yaml)
          PLUGIN_VERSION=$(yq eval '.version' plugin.yaml)
          echo "name=$PLUGIN_NAME" >> $GITHUB_OUTPUT
          echo "version=$PLUGIN_VERSION" >> $GITHUB_OUTPUT
          echo "Plugin: $PLUGIN_NAME v$PLUGIN_VERSION"

      - name: Validate manifest
        run: |
          mockforge plugin validate

      - name: Run tests
        run: |
          cargo test --release

  security-scan:
    name: Security Scan
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy
          override: true

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      - name: Run cargo-audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check licenses sources

      - name: Security scan summary
        run: |
          echo "✅ Security checks passed"

  build:
    name: Build Plugin
    needs: [validate, security-scan]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: so
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: dylib
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: dll

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Build plugin
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package plugin
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/*.${{ matrix.ext }} artifacts/ || true
          cp plugin.yaml artifacts/
          cp README.md artifacts/ || true
          cp LICENSE artifacts/ || true

      - name: Calculate checksums
        run: |
          cd artifacts
          sha256sum * > checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.os }}
          path: artifacts/

  publish:
    name: Publish to Registry
    needs: [validate, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.dry_run)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install MockForge CLI
        run: |
          cargo install mockforge-cli --locked

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/

      - name: Login to registry
        run: |
          mockforge plugin registry login --token "${{ secrets.MOCKFORGE_REGISTRY_TOKEN }}"

      - name: Publish plugin
        run: |
          mockforge plugin registry publish
        env:
          MOCKFORGE_REGISTRY_TOKEN: ${{ secrets.MOCKFORGE_REGISTRY_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Plugin: ${{ needs.validate.outputs.plugin_name }} v${{ needs.validate.outputs.plugin_version }}

            Published to MockForge Plugin Registry

            ### Installation
            ```bash
            mockforge plugin registry install ${{ needs.validate.outputs.plugin_name }}
            ```

            ### Changes
            See [CHANGELOG.md](CHANGELOG.md) for details.
          draft: false
          prerelease: false

  dry-run:
    name: Dry Run (Validation Only)
    needs: [validate, security-scan, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.dry_run

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install MockForge CLI
        run: |
          cargo install mockforge-cli --locked

      - name: Dry run publish
        run: |
          mockforge plugin registry publish --dry-run

      - name: Summary
        run: |
          echo "✅ Dry run completed successfully"
          echo "Plugin would be published with:"
          echo "  Name: ${{ needs.validate.outputs.plugin_name }}"
          echo "  Version: ${{ needs.validate.outputs.plugin_version }}"

  notify:
    name: Notify
    needs: [publish]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          echo "✅ Plugin published successfully!"

      - name: Notify failure
        if: needs.publish.result == 'failure'
        run: |
          echo "❌ Plugin publish failed"
          exit 1
