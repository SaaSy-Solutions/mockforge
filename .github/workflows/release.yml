name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_GHA_ENABLED: "true"
      SCCACHE_CACHE_SIZE: "2G"
      CARGO_INCREMENTAL: "0"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup sccache (GHA backend)
      uses: mozilla-actions/sccache-action@v0.0.5

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run tests
      run: cargo test --workspace --release

    - name: Build release binaries
      run: cargo build --workspace --release

    - name: sccache stats
      if: always()
      run: sccache --show-stats || true

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git tags
        echo "## What's Changed" >> changelog.md
        echo "" >> changelog.md

        # Get commits since last tag
        if git describe --tags --abbrev=0 HEAD^ 2>/dev/null; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> changelog.md
        else
          git log --pretty=format:"- %s (%h)" >> changelog.md
        fi

        echo "" >> changelog.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ github.ref_name }}" >> changelog.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: changelog.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: '!contains(github.ref_name, ''rc'') && !contains(github.ref_name, ''alpha'') && !contains(github.ref_name, ''beta'')'
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_GHA_ENABLED: "true"
      SCCACHE_CACHE_SIZE: "2G"
      CARGO_INCREMENTAL: "0"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup sccache (GHA backend)
      uses: mozilla-actions/sccache-action@v0.0.5

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish crates
      run: |
        # Publish in dependency order
        cargo publish -p mockforge-ws
        sleep 30
        cargo publish -p mockforge-http
        sleep 30
        cargo publish -p mockforge-grpc
        sleep 30
        cargo publish -p mockforge-cli
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: '!contains(github.ref_name, ''rc'') && !contains(github.ref_name, ''alpha'') && !contains(github.ref_name, ''beta'')'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: SaaSy-Solutions/mockforge
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  helm:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    if: '!contains(github.ref_name, ''rc'') && !contains(github.ref_name, ''alpha'') && !contains(github.ref_name, ''beta'')'
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.0'

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Update Helm chart version and appVersion
      run: |
        VERSION=${{ steps.version.outputs.version }}
        sed -i "s/^version:.*/version: $VERSION/" helm/mockforge/Chart.yaml
        sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" helm/mockforge/Chart.yaml

        echo "Updated Chart.yaml:"
        cat helm/mockforge/Chart.yaml

    - name: Lint Helm chart
      run: |
        helm lint helm/mockforge

    - name: Package Helm chart
      run: |
        mkdir -p .helm-release
        helm package helm/mockforge --destination .helm-release
        echo "Packaged charts:"
        ls -la .helm-release/

    - name: Generate Helm repository index
      run: |
        cd .helm-release
        helm repo index . --url https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}

    - name: Upload Helm chart to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          .helm-release/*.tgz
          .helm-release/index.yaml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout gh-pages branch
      uses: actions/checkout@v5
      with:
        ref: gh-pages
        path: gh-pages

    - name: Update Helm repository on GitHub Pages
      run: |
        # Copy packaged chart to gh-pages
        mkdir -p gh-pages/charts
        cp .helm-release/*.tgz gh-pages/charts/

        # Generate index for all charts
        cd gh-pages
        helm repo index charts --url https://${{ github.repository_owner }}.github.io/mockforge/charts --merge charts/index.yaml || helm repo index charts --url https://${{ github.repository_owner }}.github.io/mockforge/charts

        # Create README if it doesn't exist
        if [ ! -f charts/README.md ]; then
          cat > charts/README.md << 'EOF'
        # MockForge Helm Chart Repository

        ## Usage

        Add the repository:
        ```bash
        helm repo add mockforge https://${{ github.repository_owner }}.github.io/mockforge/charts
        helm repo update
        ```

        Install MockForge:
        ```bash
        helm install mockforge mockforge/mockforge
        ```

        ## Available Charts

        - **mockforge**: Main application chart

        ## Documentation

        For full documentation, visit: https://mockforge.dev
        EOF
        fi

    - name: Commit and push to gh-pages
      run: |
        cd gh-pages
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add charts/
        git commit -m "Release Helm chart version ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push origin gh-pages || echo "No changes to push"
