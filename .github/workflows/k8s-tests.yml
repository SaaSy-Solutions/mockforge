name: Kubernetes Tests

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'k8s/**'
      - 'helm/**'
      - '.github/workflows/k8s-tests.yml'
  push:
    branches: [main, develop]
    paths:
      - 'k8s/**'
      - 'helm/**'
  workflow_dispatch:

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Validate YAML syntax
        run: |
          find k8s -name '*.yaml' -o -name '*.yml' | while read file; do
            echo "Validating $file"
            kubectl --dry-run=client apply -f "$file" || exit 1
          done

      - name: Run kubeval
        uses: instrumenta/kubeval-action@master
        with:
          files: k8s/

      - name: Run kubeconform
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
          ./kubeconform -summary -output json k8s/*.yaml

  lint-helm-charts:
    name: Lint Helm Charts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Lint Helm charts
        run: |
          helm lint helm/mockforge

      - name: Template Helm charts
        run: |
          helm template mockforge helm/mockforge \
            --namespace mockforge \
            --create-namespace \
            --values helm/mockforge/values.yaml \
            > /tmp/rendered-manifests.yaml

      - name: Validate rendered templates
        run: |
          kubectl --dry-run=client apply -f /tmp/rendered-manifests.yaml

      - name: Check for deprecated APIs
        uses: doitintl/kube-no-trouble@master
        with:
          filename: /tmp/rendered-manifests.yaml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: k8s/
          framework: kubernetes
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run kube-score
        run: |
          curl -L https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64 -o kube-score
          chmod +x kube-score
          find k8s -name '*.yaml' -exec ./kube-score score {} \;

      - name: Run Polaris audit
        run: |
          kubectl apply -f https://github.com/FairwindsOps/polaris/releases/latest/download/dashboard.yaml
          kubectl port-forward --namespace polaris svc/polaris-dashboard 8080:80 &
          sleep 10
          curl -X POST http://localhost:8080/v1/audit -d @k8s/deployment.yaml

  test-in-kind:
    name: Test in KinD Cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create KinD cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: mockforge-test
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
            - role: control-plane
            - role: worker
            - role: worker

      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
          kubectl wait --for=condition=available --timeout=300s deployment/cert-manager -n cert-manager

      - name: Build and load Docker image
        run: |
          docker build -t mockforge:test .
          kind load docker-image mockforge:test --name mockforge-test

      - name: Create namespace
        run: |
          kubectl create namespace mockforge

      - name: Deploy MockForge
        run: |
          kubectl apply -f k8s/ -n mockforge

      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s \
            deployment/mockforge -n mockforge

      - name: Run smoke tests
        run: |
          kubectl run curl --image=curlimages/curl:latest --rm -i --restart=Never \
            -- curl -f http://mockforge.mockforge.svc.cluster.local:3000/health/live

      - name: Check pod logs
        if: failure()
        run: |
          kubectl logs -n mockforge -l app=mockforge --tail=100

      - name: Describe pods
        if: failure()
        run: |
          kubectl describe pods -n mockforge

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-in-kind

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create KinD cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: mockforge-integration

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Install Prometheus Operator
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --wait

      - name: Build and load image
        run: |
          docker build -t mockforge:test .
          kind load docker-image mockforge:test --name mockforge-integration

      - name: Install MockForge with Helm
        run: |
          helm install mockforge helm/mockforge \
            --namespace mockforge \
            --create-namespace \
            --set image.tag=test \
            --set image.pullPolicy=Never \
            --wait \
            --timeout 5m

      - name: Run integration tests
        run: |
          # HTTP tests
          kubectl run test-http --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -f http://mockforge.mockforge.svc.cluster.local:3000/health/ready

          # Metrics tests
          kubectl run test-metrics --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -f http://mockforge.mockforge.svc.cluster.local:9090/metrics

          # Admin API tests
          kubectl run test-admin --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -f http://mockforge.mockforge.svc.cluster.local:9080/health/live

      - name: Test service discovery
        run: |
          kubectl run test-dns --image=busybox:latest --rm -i --restart=Never -- \
            nslookup mockforge.mockforge.svc.cluster.local

      - name: Verify Prometheus scraping
        run: |
          kubectl port-forward -n monitoring svc/prometheus-kube-prometheus-prometheus 9090:9090 &
          sleep 10
          curl -s 'http://localhost:9090/api/v1/query?query=up{job="mockforge"}' | jq '.data.result'

      - name: Cleanup
        if: always()
        run: |
          helm uninstall mockforge -n mockforge
          kubectl delete namespace mockforge

  chaos-tests:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create KinD cluster
        uses: helm/kind-action@v1

      - name: Install Chaos Mesh
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v2.6.0/install.sh | bash

      - name: Deploy MockForge
        run: |
          docker build -t mockforge:test .
          kind load docker-image mockforge:test
          kubectl apply -f k8s/ -n mockforge
          kubectl wait --for=condition=available deployment/mockforge -n mockforge

      - name: Run pod failure chaos
        run: |
          kubectl apply -f - <<EOF
          apiVersion: chaos-mesh.org/v1alpha1
          kind: PodChaos
          metadata:
            name: pod-failure-test
            namespace: mockforge
          spec:
            action: pod-failure
            mode: one
            duration: '30s'
            selector:
              namespaces:
                - mockforge
              labelSelectors:
                app: mockforge
          EOF
          sleep 35

      - name: Verify recovery
        run: |
          kubectl wait --for=condition=available --timeout=60s \
            deployment/mockforge -n mockforge

      - name: Run network delay chaos
        run: |
          kubectl apply -f - <<EOF
          apiVersion: chaos-mesh.org/v1alpha1
          kind: NetworkChaos
          metadata:
            name: network-delay-test
            namespace: mockforge
          spec:
            action: delay
            mode: one
            selector:
              namespaces:
                - mockforge
              labelSelectors:
                app: mockforge
            delay:
              latency: '100ms'
              correlation: '100'
              jitter: '0ms'
            duration: '30s'
          EOF
          sleep 35

      - name: Cleanup chaos experiments
        if: always()
        run: |
          kubectl delete podchaos pod-failure-test -n mockforge || true
          kubectl delete networkchaos network-delay-test -n mockforge || true

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install kubecost
        run: |
          helm repo add kubecost https://kubecost.github.io/cost-analyzer/
          kubectl create namespace kubecost
          helm install kubecost kubecost/cost-analyzer \
            --namespace kubecost \
            --set kubecostToken="test-token"

      - name: Estimate resource costs
        run: |
          # Parse resource requests/limits from manifests
          echo "Estimated monthly cost for MockForge deployment:"
          grep -A 5 "resources:" k8s/deployment.yaml | \
            awk '/cpu:|memory:/ {print $2}' | \
            xargs -I {} echo "Resource: {}"
