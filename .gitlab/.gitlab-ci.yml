#
# GitLab CI/CD Pipeline for MockForge Plugin Publishing
#

variables:
  MOCKFORGE_REGISTRY_URL: ${MOCKFORGE_REGISTRY_URL:-"https://registry.mockforge.dev"}
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  RUST_VERSION: "stable"

# Cache Rust build artifacts
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cargo/
    - target/

stages:
  - validate
  - security
  - build
  - test
  - publish
  - notify

# ===== VALIDATE STAGE =====

validate:manifest:
  stage: validate
  image: rust:${RUST_VERSION}
  script:
    - apt-get update && apt-get install -y jq
    - cargo install mockforge-cli --locked
    - mockforge plugin validate
    - |
      # Extract plugin info
      PLUGIN_NAME=$(grep '^name:' plugin.yaml | awk '{print $2}')
      PLUGIN_VERSION=$(grep '^version:' plugin.yaml | awk '{print $2}')
      echo "PLUGIN_NAME=$PLUGIN_NAME" >> build.env
      echo "PLUGIN_VERSION=$PLUGIN_VERSION" >> build.env
      echo "Publishing plugin: $PLUGIN_NAME v$PLUGIN_VERSION"
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

validate:format:
  stage: validate
  image: rust:${RUST_VERSION}
  script:
    - rustup component add rustfmt
    - cargo fmt -- --check
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

# ===== SECURITY STAGE =====

security:clippy:
  stage: security
  image: rust:${RUST_VERSION}
  script:
    - rustup component add clippy
    - cargo clippy --all-features -- -D warnings
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

security:audit:
  stage: security
  image: rust:${RUST_VERSION}
  script:
    - cargo install cargo-audit
    - cargo audit
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

security:license:
  stage: security
  image: rust:${RUST_VERSION}
  script:
    - cargo install cargo-license
    - cargo license --json > licenses.json
    - |
      # Check for allowed licenses
      cat licenses.json | jq -r '.[].license' | sort -u > detected_licenses.txt
      echo "Detected licenses:"
      cat detected_licenses.txt
  artifacts:
    paths:
      - licenses.json
      - detected_licenses.txt
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

security:scan:
  stage: security
  image: rust:${RUST_VERSION}
  script:
    - cargo install mockforge-cli --locked
    - mockforge plugin security-scan . > security-report.json || true
    - |
      if [ -f security-report.json ]; then
        cat security-report.json
      else
        echo "Security scan not available"
      fi
  artifacts:
    paths:
      - security-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

# ===== BUILD STAGE =====

.build_template: &build_template
  stage: build
  image: rust:${RUST_VERSION}
  script:
    - rustup target add $BUILD_TARGET
    - cargo build --release --target $BUILD_TARGET
    - mkdir -p artifacts
    - cp target/$BUILD_TARGET/release/*.$BUILD_EXT artifacts/ 2>/dev/null || true
    - cp plugin.yaml artifacts/
    - cp README.md artifacts/ 2>/dev/null || true
    - cp LICENSE artifacts/ 2>/dev/null || true
    - cd artifacts && sha256sum * > checksums.txt
  artifacts:
    paths:
      - artifacts/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

build:linux:
  <<: *build_template
  variables:
    BUILD_TARGET: "x86_64-unknown-linux-gnu"
    BUILD_EXT: "so"
  tags:
    - linux

build:macos:
  <<: *build_template
  image: rust:${RUST_VERSION}
  variables:
    BUILD_TARGET: "x86_64-apple-darwin"
    BUILD_EXT: "dylib"
  tags:
    - macos
  allow_failure: true

build:windows:
  <<: *build_template
  image: rust:${RUST_VERSION}
  variables:
    BUILD_TARGET: "x86_64-pc-windows-msvc"
    BUILD_EXT: "dll"
  tags:
    - windows
  allow_failure: true

# ===== TEST STAGE =====

test:unit:
  stage: test
  image: rust:${RUST_VERSION}
  script:
    - cargo test --release --all-features
  coverage: '/^TOTAL.*\s+(\d+\.\d+)%/'
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

test:integration:
  stage: test
  image: rust:${RUST_VERSION}
  script:
    - cargo test --release --test integration
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

# ===== PUBLISH STAGE =====

publish:dry-run:
  stage: publish
  image: rust:${RUST_VERSION}
  script:
    - cargo install mockforge-cli --locked
    - mockforge plugin registry login --token "$MOCKFORGE_REGISTRY_TOKEN"
    - mockforge plugin registry publish --dry-run
    - echo "✅ Dry run successful - plugin is ready to publish"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DRY_RUN == "true"
    - when: manual
      allow_failure: true

publish:registry:
  stage: publish
  image: rust:${RUST_VERSION}
  dependencies:
    - validate:manifest
    - build:linux
  script:
    - cargo install mockforge-cli --locked
    - |
      # Login to registry
      if [ -z "$MOCKFORGE_REGISTRY_TOKEN" ]; then
        echo "❌ MOCKFORGE_REGISTRY_TOKEN is not set"
        exit 1
      fi
    - mockforge plugin registry login --token "$MOCKFORGE_REGISTRY_TOKEN"
    - |
      # Publish plugin
      echo "Publishing plugin to $MOCKFORGE_REGISTRY_URL"
      mockforge plugin registry publish
    - echo "✅ Plugin published successfully!"
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "web" && $DRY_RUN != "true"
      when: manual
  environment:
    name: production
    url: https://registry.mockforge.dev

publish:release:
  stage: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - validate:manifest
  script:
    - |
      echo "Creating GitLab release for $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: |
      ## Plugin: $PLUGIN_NAME v$PLUGIN_VERSION

      Published to MockForge Plugin Registry

      ### Installation
      ```bash
      mockforge plugin registry install $PLUGIN_NAME
      ```

      ### Changes
      See [CHANGELOG.md](CHANGELOG.md) for details.
    assets:
      links:
        - name: 'Plugin Registry'
          url: 'https://registry.mockforge.dev/plugins/$PLUGIN_NAME'
          link_type: 'other'
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

# ===== NOTIFY STAGE =====

notify:success:
  stage: notify
  image: alpine:latest
  script:
    - |
      echo "✅ Plugin published successfully!"
      echo "Plugin: $PLUGIN_NAME v$PLUGIN_VERSION"
      echo "Registry: $MOCKFORGE_REGISTRY_URL"
      # Optional: Send notification to Slack, Discord, etc.
      # curl -X POST $SLACK_WEBHOOK_URL -d "{'text':'Plugin published: $PLUGIN_NAME v$PLUGIN_VERSION'}"
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

notify:failure:
  stage: notify
  image: alpine:latest
  script:
    - |
      echo "❌ Pipeline failed!"
      echo "Check the logs for details"
      # Optional: Send failure notification
  when: on_failure
  rules:
    - if: $CI_COMMIT_TAG

# ===== CLEANUP =====

cleanup:
  stage: .post
  image: alpine:latest
  script:
    - echo "Cleaning up temporary artifacts"
  when: always
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

# ===== WORKFLOW RULES =====

workflow:
  rules:
    # Run on tags
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
    # Run on manual trigger
    - if: $CI_PIPELINE_SOURCE == "web"
    # Run on merge requests (for testing)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
