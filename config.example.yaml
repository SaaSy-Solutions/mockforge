# MockForge Configuration Example
# This file demonstrates all available configuration options

# HTTP server configuration
http:
  port: 3000
  host: "0.0.0.0"
  openapi_spec: null  # Path to OpenAPI spec file
  cors_enabled: true
  request_timeout_secs: 30
  # Validation controls
  request_validation: "enforce"   # off|warn|enforce
  aggregate_validation_errors: true
  validate_responses: false       # warn-only logging
  # Expand simple tokens in mock responses and media examples
  # Tokens: {{uuid}}, {{now}}, {{rand.int}}, {{rand.float}}
  # Can also be toggled via env MOCKFORGE_RESPONSE_TEMPLATE_EXPAND=true|false
  response_template_expand: false
  skip_admin_validation: true     # don't validate admin endpoints under mount path
  validation_overrides:
    "POST /users/{id}": "warn"
    "GET /internal/health": "off"

# WebSocket server configuration
websocket:
  port: 3001
  host: "0.0.0.0"
  replay_file: null  # Path to WebSocket replay file
  connection_timeout_secs: 300

# gRPC server configuration
grpc:
  port: 50051
  host: "0.0.0.0"
  proto_dir: null  # Directory containing .proto files
  tls: null  # TLS configuration (optional)

# Admin UI configuration
admin:
  enabled: false
  port: 8080
  host: "127.0.0.1"
  auth_required: false
  username: null
  password: null
  # Optional: mount Admin UI under HTTP server instead of separate port
  # When set (e.g., "/admin"), the Admin UI will be available at
  #   http://<http-host>:<http-port><mount_path>/
  # and APIs at
  #   <mount_path>/__mockforge/*
  mount_path: null
  # Toggle Admin API endpoints under __mockforge
  api_enabled: true

# Core MockForge configuration
core:
  latency_enabled: true
  failures_enabled: false
  overrides_enabled: true
  traffic_shaping_enabled: false  # Enable traffic shaping (bandwidth + burst loss)
  # Failure injection configuration
  failure_config:
    global_error_rate: 0.0  # Global error rate (0.0 to 1.0)
    default_status_codes: [500, 502, 503, 504]  # Default status codes for failures
    # Per-tag error rates and status overrides
    tag_configs:
      auth:
        error_rate: 0.05  # 5% error rate for auth operations
        status_codes: [401, 403]  # Custom status codes for auth failures
        error_message: "Authentication failed"
      payments:
        error_rate: 0.02  # 2% error rate for payment operations
        status_codes: [402, 503]  # Custom status codes for payment failures
        error_message: "Payment processing failed"
      analytics:
        error_rate: 0.0  # No errors for analytics
    # Tag filtering (optional)
    include_tags: []  # If empty, all tags are included
    exclude_tags: ["health", "metrics"]  # Exclude these tags from failure injection
  proxy:
    upstream_url: "http://api.example.com"
    timeout_seconds: 30
  default_latency:
    base_ms: 50
    jitter_ms: 20
    distribution: "fixed"  # fixed, normal, or pareto
    # For normal distribution:
    # std_dev_ms: 10.0
    # For pareto distribution:
    # pareto_shape: 2.0
    min_ms: 10           # Minimum latency bound
    max_ms: 5000         # Maximum latency bound (optional)
    tag_overrides:
      auth: 100
      analytics: 200

  # Traffic shaping configuration
  traffic_shaping:
    # Bandwidth throttling configuration
    bandwidth:
      enabled: false
      max_bytes_per_sec: 1048576  # 1 MB/s (0 = unlimited)
      burst_capacity_bytes: 10485760  # 10 MB burst capacity
      tag_overrides:
        # High-priority endpoints get higher bandwidth
        "high-priority": 5242880  # 5 MB/s for high-priority requests
        "streaming": 10485760     # 10 MB/s for streaming endpoints

    # Burst loss configuration (simulates intermittent connectivity issues)
    burst_loss:
      enabled: false
      burst_probability: 0.1  # 10% chance of entering loss burst
      burst_duration_ms: 5000  # 5 second bursts
      loss_rate_during_burst: 0.5  # 50% packet loss during burst
      recovery_time_ms: 30000  # 30 second recovery between bursts
      tag_overrides:
        # Unstable mobile connection simulation
        "mobile":
          burst_probability: 0.3
          burst_duration_ms: 10000
          loss_rate_during_burst: 0.8
          recovery_time_ms: 60000
        # Satellite connection with longer delays
        "satellite":
          burst_probability: 0.2
          burst_duration_ms: 15000
          loss_rate_during_burst: 0.6
          recovery_time_ms: 120000

# Example environment variables for traffic shaping:
# MOCKFORGE_TRAFFIC_SHAPING_ENABLED=true
# MOCKFORGE_BANDWIDTH_ENABLED=true
# MOCKFORGE_BANDWIDTH_MAX_BYTES_PER_SEC=1048576
# MOCKFORGE_BURST_LOSS_ENABLED=true
# MOCKFORGE_BURST_LOSS_PROBABILITY=0.1

# Logging configuration
logging:
  level: "info"
  json_format: false
  file_path: null  # Optional log file path
  max_file_size_mb: 10
  max_files: 5

# Data generation configuration
data:
  default_rows: 100
  default_format: "json"
  locale: "en"
  templates: {}  # Custom faker templates
  rag:
    enabled: false
    api_endpoint: null
    api_key: null
    model: null
    context_window: 4000

# Latency profiles (optional external file)
# Can be loaded from a separate file: latency_profiles: "config/latency.yaml"
# Example latency configuration:
# operation:getUser:
#   fixed_ms: 120
#   jitter_ms: 80
#   fail_p: 0.0
#
# tag:Payments:
#   fixed_ms: 200
#   jitter_ms: 300
#   fail_p: 0.05
#   fail_status: 503

# Request/Response overrides (optional external file)
# Can be loaded from a separate file: overrides: "config/overrides.yaml"
# Example overrides configuration with conditional filtering:
# - targets: ["operation:getUser"]
#   when: "$.user.role"  # Only apply if user has a role field
#   patch:
#     - op: add
#       path: /metadata/requestId
#       value: "{{uuid}}"
#     - op: replace
#       path: /user/createdAt
#       value: "{{now}}"
#     - op: add
#       path: /user/score
#       value: "{{rand.float}}"
# - targets: ["tag:Payments"]
#   when: "header[authorization]=Bearer admin-token"  # Only apply for admin users
#   patch:
#     - op: replace
#       path: /payment/status
#       value: "FAILED"
# - targets: ["operation:getOrder"]
#   when: "$.request.query.status=pending"  # Only apply for pending orders
#   patch:
#     - op: add
#       path: /order/processingDelay
#       value: "2 hours"
# - targets: ["path:/api/xml/*"]
#   when: "/order[@status='urgent']"  # XPath for XML responses
#   patch:
#     - op: replace
#       path: /order/priority
#       value: "HIGH"
