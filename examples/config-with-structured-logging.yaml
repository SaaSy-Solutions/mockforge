# MockForge Configuration Example: Structured Logging and OpenTelemetry
#
# This configuration demonstrates:
# - Structured JSON logging
# - File output with rotation
# - OpenTelemetry distributed tracing integration
# - Enhanced observability for production environments

# HTTP Server Configuration
http:
  port: 3000
  host: "0.0.0.0"
  openapi_spec: null
  cors_enabled: true
  request_timeout_secs: 30
  request_validation: "enforce"
  aggregate_validation_errors: true
  validate_responses: false
  response_template_expand: false
  validation_status: null
  validation_overrides: {}
  skip_admin_validation: true
  auth: null

# WebSocket Server Configuration
websocket:
  port: 3001
  host: "0.0.0.0"
  replay_file: null
  connection_timeout_secs: 300

# gRPC Server Configuration
grpc:
  port: 50051
  host: "0.0.0.0"
  proto_dir: null
  tls: null

# SMTP Server Configuration
smtp:
  enabled: false
  port: 1025
  host: "0.0.0.0"
  hostname: "mockforge-smtp"
  fixtures_dir: "./fixtures/smtp"
  timeout_secs: 300
  max_connections: 10
  enable_mailbox: true
  max_mailbox_messages: 1000

# Admin UI Configuration
admin:
  enabled: true
  port: 9080
  host: "127.0.0.1"
  auth_required: false
  username: null
  password: null
  mount_path: null
  api_enabled: true

# Logging Configuration with Structured JSON Support
logging:
  # Log level: trace, debug, info, warn, error
  level: "info"

  # Enable JSON format for structured logging
  # When enabled, logs are output as JSON objects with fields like:
  # - timestamp: ISO 8601 timestamp
  # - level: Log level (INFO, WARN, ERROR, etc.)
  # - target: Module path
  # - message: Log message
  # - span: Current tracing span (if any)
  # - fields: Additional structured fields
  json_format: true

  # Optional: Write logs to file (in addition to stdout)
  # Logs will be rotated when they reach max_file_size_mb
  file_path: "logs/mockforge.log"

  # Maximum log file size in MB before rotation
  max_file_size_mb: 100

  # Maximum number of rotated log files to keep
  max_files: 10

# Request Chaining Configuration
chaining:
  enabled: false
  max_chain_length: 20
  global_timeout_secs: 300
  enable_parallel_execution: false

# Data Generation Configuration
data:
  default_rows: 100
  default_format: "json"
  locale: "en"
  templates: {}
  rag:
    enabled: false
    provider: "openai"
    api_endpoint: null
    api_key: null
    model: "gpt-3.5-turbo"
    max_tokens: 1024
    temperature: 0.7
    context_window: 4000
    caching: true
    cache_ttl_secs: 3600
    timeout_secs: 30
    max_retries: 3

# Observability Configuration
observability:
  # Prometheus Metrics
  prometheus:
    enabled: true
    port: 9090
    host: "0.0.0.0"
    path: "/metrics"

  # OpenTelemetry Distributed Tracing
  # This integrates with the structured logging system to provide
  # distributed tracing across all MockForge protocols
  opentelemetry:
    enabled: true

    # Service name for traces
    service_name: "mockforge"

    # Deployment environment
    environment: "production"

    # Jaeger endpoint for trace export
    jaeger_endpoint: "http://localhost:14268/api/traces"

    # OTLP endpoint (alternative to Jaeger)
    # Use this for OpenTelemetry Collector or other OTLP-compatible backends
    otlp_endpoint: "http://localhost:4317"

    # Protocol: grpc or http
    protocol: "grpc"

    # Sampling rate (0.0 to 1.0)
    # 1.0 = sample all traces
    # 0.1 = sample 10% of traces
    sampling_rate: 1.0

  # API Flight Recorder
  recorder:
    enabled: true
    database_path: "./mockforge-recordings.db"
    api_enabled: true
    api_port: null
    max_requests: 10000
    retention_days: 7
    record_http: true
    record_grpc: true
    record_websocket: true
    record_graphql: true

  # Chaos Engineering
  chaos:
    enabled: false
    latency: null
    fault_injection: null
    rate_limit: null
    traffic_shaping: null
    scenario: null

# Core Configuration
core:
  default_latency:
    enabled: false
    min_ms: 0
    max_ms: 0
  latency_enabled: false
  default_failure_rate: 0.0
  failures_enabled: false
  overrides_enabled: true
  traffic_shaping_enabled: false
  traffic_shaping:
    bandwidth:
      enabled: false
      max_bytes_per_sec: 1000000
      burst_capacity_bytes: 100000
    burst_loss:
      enabled: false
      burst_probability: 0.0
      burst_duration_ms: 0
      loss_rate_during_burst: 0.0
      recovery_time_ms: 0
  chaos_random: null

# Example Usage:
#
# 1. Start MockForge with this configuration:
#    mockforge serve --config examples/config-with-structured-logging.yaml
#
# 2. View JSON logs in stdout:
#    mockforge serve --config examples/config-with-structured-logging.yaml | jq
#
# 3. View logs in the file:
#    tail -f logs/mockforge.log | jq
#
# 4. Send traces to Jaeger:
#    docker run -d --name jaeger \
#      -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
#      -p 5775:5775/udp \
#      -p 6831:6831/udp \
#      -p 6832:6832/udp \
#      -p 5778:5778 \
#      -p 16686:16686 \
#      -p 14250:14250 \
#      -p 14268:14268 \
#      -p 14269:14269 \
#      -p 9411:9411 \
#      jaegertracing/all-in-one:latest
#
#    Then open http://localhost:16686 to view traces
#
# 5. Example JSON log output:
#    {
#      "timestamp": "2025-10-09T12:34:56.789Z",
#      "level": "INFO",
#      "fields": {
#        "message": "HTTP request received"
#      },
#      "target": "mockforge_http::middleware",
#      "span": {
#        "name": "http_request",
#        "trace_id": "abc123...",
#        "span_id": "def456..."
#      },
#      "spans": [
#        {
#          "name": "http_request",
#          "method": "GET",
#          "path": "/api/users",
#          "status": 200
#        }
#      ]
#    }
