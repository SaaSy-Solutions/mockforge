openapi: 3.0.0
info:
  title: AI-Assisted Support Chatbot API
  description: Example API demonstrating AI-assisted response generation in MockForge
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local MockForge server

paths:
  /chat:
    post:
      summary: Send a message to the support chatbot
      description: |
        This endpoint demonstrates AI-assisted response generation.
        The response is dynamically generated by an LLM based on the user's message.
      operationId: sendChatMessage
      x-mockforge-ai:
        enabled: true
        mode: intelligent
        prompt: |
          You are a helpful customer support chatbot for a SaaS product called "DataFlow Analytics".

          The user said: "{{body.message}}"

          Respond in a friendly, professional manner. Include helpful information and offer to assist further.

          Return your response as JSON with the following structure:
          {
            "message": "your response here",
            "timestamp": "current timestamp",
            "suggestions": ["suggestion 1", "suggestion 2"]
          }
        temperature: 0.7
        max_tokens: 500
        context: "DataFlow Analytics is a business intelligence platform that helps companies analyze their data. Common topics: data import, dashboard creation, sharing reports, API integration."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: User's message to the chatbot
                  example: "How do I import data from a CSV file?"
                user_id:
                  type: string
                  description: Optional user identifier
                  example: "user_12345"
      responses:
        '200':
          description: Chatbot response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Chatbot's response message
                  timestamp:
                    type: string
                    format: date-time
                  suggestions:
                    type: array
                    items:
                      type: string
                    description: Follow-up suggestions

  /feedback/{conversation_id}:
    post:
      summary: Submit feedback on a conversation
      description: |
        This endpoint uses AI to generate a contextual response based on the feedback.
      operationId: submitFeedback
      x-mockforge-ai:
        enabled: true
        mode: intelligent
        prompt: |
          A user has submitted feedback for conversation {{path.conversation_id}}.

          Rating: {{body.rating}} out of 5
          Comment: {{body.comment}}

          Generate a thank you message that:
          - Thanks the user for their feedback
          - If rating is 4-5, express appreciation
          - If rating is 1-3, apologize and mention that the team will review
          - Sound genuine and professional

          Return JSON: {"message": "your thank you message", "follow_up_action": "action to take"}
        temperature: 0.8
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the conversation being rated
          example: "conv_abc123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 4
                comment:
                  type: string
                  example: "Very helpful, but response was a bit slow"
      responses:
        '200':
          description: Feedback acknowledgment
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  follow_up_action:
                    type: string

  /help/topics:
    get:
      summary: Get available help topics
      description: |
        This is a standard endpoint without AI - returns static data.
      operationId: getHelpTopics
      responses:
        '200':
          description: List of help topics
          content:
            application/json:
              schema:
                type: object
                properties:
                  topics:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        description:
                          type: string
              example:
                topics:
                  - id: "import"
                    title: "Data Import"
                    description: "Learn how to import data from various sources"
                  - id: "dashboards"
                    title: "Dashboards"
                    description: "Create and customize dashboards"
                  - id: "api"
                    title: "API Integration"
                    description: "Integrate with your applications"

  /support/query:
    post:
      summary: General support query with context
      description: |
        AI responds based on the query with product context.
        Demonstrates using query parameters and headers in AI prompts.
      operationId: supportQuery
      x-mockforge-ai:
        enabled: true
        mode: intelligent
        prompt: |
          Support query from {{query.category}} category.
          User agent: {{headers.user-agent}}

          Question: {{body.question}}

          Provide a helpful response with:
          1. Direct answer to the question
          2. Link to relevant documentation (make up a realistic URL)
          3. Offer to escalate if needed

          Return JSON: {"answer": "...", "doc_link": "...", "can_escalate": true/false}
        temperature: 0.6
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
            enum: [technical, billing, account, general]
          example: "technical"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
              properties:
                question:
                  type: string
                  example: "How do I reset my password?"
                urgency:
                  type: string
                  enum: [low, medium, high]
                  default: medium
      responses:
        '200':
          description: Support response
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                  doc_link:
                    type: string
                  can_escalate:
                    type: boolean
