openapi: 3.0.3
info:
  title: Scenario Switching Demo API
  version: 1.0.0
  description: |
    This API demonstrates MockForge's scenario switching feature.
    Use the X-Mockforge-Scenario header or MOCKFORGE_HTTP_SCENARIO environment variable
    to switch between different response examples.

    Examples:
    - curl -H "X-Mockforge-Scenario: happy" http://localhost:8080/users/123
    - curl -H "X-Mockforge-Scenario: errors" http://localhost:8080/users/123
    - MOCKFORGE_HTTP_SCENARIO=edge cargo run -- serve examples/scenario-switching-demo.yaml

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /users/{userId}:
    get:
      summary: Get user by ID
      description: Returns user details. Supports 'happy', 'errors', and 'edge' scenarios.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user ID to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              # Multiple scenarios using the 'examples' field
              examples:
                happy:
                  summary: Happy path - user exists and is active
                  value:
                    id: "123"
                    username: "john_doe"
                    email: "john.doe@example.com"
                    status: "active"
                    profile:
                      firstName: "John"
                      lastName: "Doe"
                      avatarUrl: "https://example.com/avatars/john.jpg"
                      bio: "Software engineer and open source enthusiast"
                    createdAt: "2023-01-15T10:30:00Z"
                    lastLoginAt: "2024-01-20T14:45:00Z"

                errors:
                  summary: Error scenario - user suspended
                  value:
                    id: "123"
                    username: "suspended_user"
                    email: "suspended@example.com"
                    status: "suspended"
                    profile:
                      firstName: "Suspended"
                      lastName: "User"
                      avatarUrl: null
                      bio: null
                    suspensionReason: "Terms of service violation"
                    suspendedAt: "2024-01-10T09:00:00Z"
                    createdAt: "2022-05-20T08:15:00Z"
                    lastLoginAt: "2024-01-09T18:30:00Z"

                edge:
                  summary: Edge case - new user with minimal data
                  value:
                    id: "123"
                    username: "new_user_2024"
                    email: "new.user@example.com"
                    status: "pending_verification"
                    profile:
                      firstName: "New"
                      lastName: "User"
                      avatarUrl: null
                      bio: null
                    createdAt: "2024-01-20T16:00:00Z"
                    lastLoginAt: null
              schema:
                $ref: '#/components/schemas/User'

  /products/{productId}:
    get:
      summary: Get product by ID
      description: Returns product details. Supports 'happy', 'errors', and 'edge' scenarios.
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The product ID to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                happy:
                  summary: Happy path - product in stock
                  value:
                    id: "prod_001"
                    name: "Premium Wireless Headphones"
                    description: "High-quality noise-cancelling headphones with 40-hour battery life"
                    price: 299.99
                    currency: "USD"
                    inStock: true
                    stockQuantity: 150
                    category: "Electronics"
                    brand: "AudioPro"
                    rating: 4.7
                    reviewCount: 2341
                    images:
                      - "https://example.com/products/headphones-1.jpg"
                      - "https://example.com/products/headphones-2.jpg"

                errors:
                  summary: Error scenario - product out of stock
                  value:
                    id: "prod_001"
                    name: "Premium Wireless Headphones"
                    description: "High-quality noise-cancelling headphones with 40-hour battery life"
                    price: 299.99
                    currency: "USD"
                    inStock: false
                    stockQuantity: 0
                    category: "Electronics"
                    brand: "AudioPro"
                    rating: 4.7
                    reviewCount: 2341
                    images:
                      - "https://example.com/products/headphones-1.jpg"
                      - "https://example.com/products/headphones-2.jpg"
                    expectedRestockDate: "2024-02-15"

                edge:
                  summary: Edge case - discontinued product
                  value:
                    id: "prod_001"
                    name: "Premium Wireless Headphones (Discontinued)"
                    description: "This product has been discontinued"
                    price: 199.99
                    currency: "USD"
                    inStock: false
                    stockQuantity: 0
                    category: "Electronics"
                    brand: "AudioPro"
                    rating: 4.7
                    reviewCount: 2341
                    images: []
                    discontinued: true
                    replacementProductId: "prod_002"
              schema:
                $ref: '#/components/schemas/Product'

  /orders:
    post:
      summary: Create a new order
      description: Creates an order. Supports 'happy', 'errors', and 'edge' scenarios for responses.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - items
              properties:
                userId:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              examples:
                happy:
                  summary: Happy path - order created successfully
                  value:
                    orderId: "ord_abc123"
                    userId: "123"
                    status: "confirmed"
                    total: 599.98
                    currency: "USD"
                    items:
                      - productId: "prod_001"
                        quantity: 2
                        unitPrice: 299.99
                        subtotal: 599.98
                    createdAt: "2024-01-20T15:30:00Z"
                    estimatedDelivery: "2024-01-25T12:00:00Z"

                errors:
                  summary: Error scenario - payment failed
                  value:
                    orderId: "ord_abc123"
                    userId: "123"
                    status: "payment_failed"
                    total: 599.98
                    currency: "USD"
                    items:
                      - productId: "prod_001"
                        quantity: 2
                        unitPrice: 299.99
                        subtotal: 599.98
                    createdAt: "2024-01-20T15:30:00Z"
                    errorCode: "INSUFFICIENT_FUNDS"
                    errorMessage: "Payment card has insufficient funds"

                edge:
                  summary: Edge case - partial inventory
                  value:
                    orderId: "ord_abc123"
                    userId: "123"
                    status: "partially_available"
                    total: 299.99
                    currency: "USD"
                    items:
                      - productId: "prod_001"
                        quantity: 1
                        unitPrice: 299.99
                        subtotal: 299.99
                        available: true
                      - productId: "prod_002"
                        quantity: 1
                        unitPrice: 0
                        subtotal: 0
                        available: false
                        reason: "Out of stock"
                    createdAt: "2024-01-20T15:30:00Z"
                    warning: "Some items are unavailable"
              schema:
                $ref: '#/components/schemas/Order'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
        - status
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum: [active, suspended, pending_verification]
        profile:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            avatarUrl:
              type: string
              format: uri
              nullable: true
            bio:
              type: string
              nullable: true
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
          nullable: true

    Product:
      type: object
      required:
        - id
        - name
        - price
        - currency
        - inStock
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        currency:
          type: string
        inStock:
          type: boolean
        stockQuantity:
          type: integer
        category:
          type: string
        brand:
          type: string
        rating:
          type: number
          format: double
        reviewCount:
          type: integer
        images:
          type: array
          items:
            type: string
            format: uri

    Order:
      type: object
      required:
        - orderId
        - userId
        - status
        - total
        - currency
      properties:
        orderId:
          type: string
        userId:
          type: string
        status:
          type: string
        total:
          type: number
          format: double
        currency:
          type: string
        items:
          type: array
          items:
            type: object
        createdAt:
          type: string
          format: date-time
